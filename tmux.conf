#将r 设置为加载配置文件，并显示"reloaded!"信息
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# 分屏
bind - splitw -v -c '#{pane_current_path}' # 垂直方向新增面板，默认进入当前目录
bind | splitw -h -c '#{pane_current_path}' # 水平方向新增面板，默认进入当前目录

# 鼠标
set-option -g mouse on
# vi键位
setw -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -Tcopy-mode-vi v send-keys -X begin-selection
bind -Tcopy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"

# Update default binding of `Enter` to also use copy-pipe
unbind -Tcopy-mode-vi Enter
bind -Tcopy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -i -selection clipboard"

# 重新映射移动键
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
   | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# --------- 配置颜色 -------------
set -g default-terminal "screen-256color"
set-option -g history-limit 50000


