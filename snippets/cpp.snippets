# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

################
# Pre-processor

snippet incc "include"
#include <${1:iostream>}
endsnippet

snippet inc "include"
#include "${1:`!p snip.rv = snip.basename`.h"}
endsnippet

###############
# Keywords

snippet struct "c++ struct .. (struct)"
struct ${1:`!p snip.rv = snip.basename or "name"`} {
 public:
	${2}

 private:
	${0}
};
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
 public:
	${2}

 private:
	${0}
};
endsnippet

snippet namespace "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet

snippet for "general for loop"
for (${2:int} ${1:i} = ${3:0}; $1 < ${4:count}; ++$1) {
  ${5}
}
endsnippet
	
snippet forr "reverse for loop"
for (${2:int} ${1:i} = ${3:length} - 1; $1 >= ${4:0}; --$1) {
  ${4}
}
endsnippet

snippet fore "for range loop"
for(auto& ${2:x} : ${1:collection}) {
	${0:/* code */}
}
endsnippet


snippet forc "iterator for loop"
for (auto${5:} ${1:i} = ${2:v}.begin(); $1 ${3:!=} $2.end(); ${4:++}$1) {
	${VISUAL}$0
}
endsnippet

snippet vec "vector"
std::vector<${1:int}> ${2:v};	
endsnippet


snippet mfun "memberFunction" 
${4:void} ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}::${2:memberFunction}(${3:parameters}) {
  ${5}
}
endsnippet

snippet cfun "memberFunction" 
${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}::${2:$1}(${3:parameters}) {
  ${4}
}
endsnippet

snippet cla "An entire .h generator" 
#pragma once

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
 public:
	$1();
	virtual ~$1();

 private:
	$3
};
endsnippet

snippet main "int main (int argc, char** argv)"
int main (int argc, char** argv) {
  ${0}
	return 0;
}
endsnippet

snippet once "pragma once"
#pragma once
endsnippet

snippet switch "switch"
switch (${0:choice}) {
default:
  break;
}
endsnippet


